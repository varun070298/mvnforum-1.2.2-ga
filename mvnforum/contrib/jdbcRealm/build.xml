<!--
     $Id: build.xml,v 1.12 2008/06/16 06:41:30 minhnn Exp $
-->

<project name="jdbcRealm" default="compile" basedir=".">

    <property file="build.properties" />
    <property file="${user.home}/build.properties" />

    <property name="app.name" value="mvn-jdbc-realm" />
    <property name="build-root.home" value="${basedir}/../../../build" />
    <property name="build.home" value="${build-root.home}/build-${app.name}" />
    <property name="src.home" value="${basedir}/src" />
    <property name="srcweb.home" value="${basedir}/srcweb" />
    <property name="conf.home" value="${basedir}/conf" />
    <property name="lib.home" value="${basedir}/lib" />

    <property name="myvietnam.home" value="${basedir}/../../../myvietnam" />
    <property name="commons-logging-1.1.1.jar" value="${myvietnam.home}/lib/commons-logging-1.1.1.jar" />

    <property name="mvnforum.home" value="${basedir}/../.." />
    <property name="driver.jar" value="${mvnforum.home}/driver/mysql-connector-java-3.0.17-ga-bin.jar" />

    <!--  ==================== Compilation Control Options ==================== -->
    <!--
    These properties control option settings on the Javac compiler when it
    is invoked using the <javac> task.
    
    compile.debug        Should compilation include the debug option?
    
    compile.deprecation  Should compilation include the deprecation option?
    
    compile.optimize     Should compilation include the optimize option?
    -->
    <property name="compile.debug" value="true" />
    <property name="compile.deprecation" value="false" />
    <property name="compile.optimize" value="true" />

    <!-- ==================== External Dependencies =========================== -->
    <!--
    <property name="foo.jar" value="/path/to/foo.jar" />
    -->

    <!-- ==================== Compilation Classpath =========================== -->
    <path id="compile.classpath">
        <fileset dir="${lib.home}">
            <include name="*.jar" />
        </fileset>
        <fileset file="${commons-logging-1.1.1.jar}" />
    </path>
    
    <!-- ==================== All Target ====================================== -->
    <!--
    The "all" target is a shortcut for running the "clean" target followed
    by the "compile" target, to force a complete recompile.
    -->
    <target name="all" depends="clean,compile" description="Clean build and dist directories, then compile" />
    
    <!-- ==================== Clean Target ==================================== -->
    <!--
    The "clean" target deletes any previous "build" and "dist" directory,
    so that you can be ensured the application can be built from scratch.
    -->
    <target name="clean" description="Delete old build and dist directories">
        <delete dir="${build.home}" />
    </target>
    
    <!-- ==================== Prepare Target ================================== -->
    <!--
    The "prepare" target is used to create the "build" destination directory,
    and copy the static contents of your web application to it.  If you need
    to copy static files from external dependencies, you can customize the
    contents of this task.
    
    Normally, this task is executed indirectly when needed.
    -->
    <target name="prepare">
        <!-- Create build directories as needed -->
        <mkdir dir="${build.home}" />
    </target>
    <!-- ==================== Compile Target ================================== -->
    <!--
    The "compile" target transforms source files (from your "src" directory)
    into object files in the appropriate location in the build directory.
    This example assumes that you will be including your classes in an
    unpacked directory hierarchy under "/WEB-INF/classes".
    -->
    <target name="compile" depends="prepare" description="Compile Java sources">
        <!-- Compile Java classes as necessary -->
        <mkdir dir="${build.home}/classes" />
        <javac srcdir="${src.home}" destdir="${build.home}/classes" source="1.4" target="1.4" debug="${compile.debug}" deprecation="${compile.deprecation}" optimize="${compile.optimize}">
            <classpath refid="compile.classpath" />
        </javac>
        <mkdir dir="${build.home}/lib" />
        <jar destfile="${build.home}/lib/${app.name}.jar" basedir="${build.home}/classes" />
    </target>
    
    <!-- ==================== Javadoc Target ================================== -->
    <!--
    The "javadoc" target creates Javadoc API documentation for the Java
    classes included in your application.  Normally, this is only required
    when preparing a distribution release, but is available as a separate
    target in case the developer wants to create Javadocs independently.
    -->
    <target name="javadoc" depends="compile" description="Create Javadoc API documentation">
        <mkdir dir="${dist.home}/docs/api" />
        <javadoc sourcepath="${src.home}" destdir="${dist.home}/docs/api" packagenames="*">
            <classpath refid="compile.classpath" />
        </javadoc>
    </target>

    <target name="prepare-deploy" depends="compile">
        <mkdir dir="${build.home}/webapp" />
        <mkdir dir="${build.home}/webapp/${app.name}" />
        <copy todir="${build.home}/webapp/${app.name}/">
            <fileset dir="${srcweb.home}" />
        </copy>
    </target>

    <target name="deploy-lib" depends="compile" description="Deploy Realm Classes to Server">
        <copy todir="${server-lib-dest.home}/">
            <fileset dir="${build.home}/lib" />
        </copy>
    </target>

    <target name="deploy-driver" description="Deploy Driver to Server">
        <echo message="Driver: ${driver.jar} and Dest: ${server-driver-dest.home}" />
        <copy todir="${server-driver-dest.home}">
            <fileset file="${driver.jar}" />
        </copy>
    </target>

    <target name="realm-config" description="Configure using mvn JDBC Realm">
        <copy todir="${server-conf-dest.home}">
            <fileset file="${conf.home}/mvn-jdbc-realm.xml" />
        </copy>
    </target>

    <target name="deploy-all" depends="prepare-deploy, deploy-lib, deploy-driver, realm-config" description="Deploy to Server">
        <copy todir="${webapps.home}">
            <fileset dir="${build.home}/webapp" />
        </copy>
    </target>

</project>
